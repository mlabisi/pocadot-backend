"""
Represents a user in the system
"""
type User {
    # Unique user ID
    id: ID!

    # Unique username
    username: String!

    # All listings created by user
    listings: [Listing!]!

    # All collections created by user
    collections: [Collection!]!

    # All groups marked as fave by user
    faveGroups: [Group!]!

    # All listings marked as fave by user
    faveListings: [Listing!]!

    # All users marked as fave by user
    faveUsers: [User!]!
}

"""
Available queries for the User type
"""
type Query {
    # Querying for a single user
    user: User!

    # Querying for multiple users
    users: [User!]!
}

"""
Available mutations for the User type
"""
type Mutation {
    # Adding a single user
    addUser(input: AddUserInput!): User!

    # Updating a single user
    updateUser(input: UpdateUserInput!, where: UniqueUserInput!): User!

    # Removing a single user
    removeUser(input: UniqueUserInput!): User!
}

"""
When adding a user, no other fields can be added
"""
input AddUserInput {
    name: String!

    username: String!
}

"""
When updating a user, other existing fields can be added
"""
input UpdateUserInput {
    name: String

    username: String

    listings: [UniqueListingInput!]

    collections: [UniqueCollectionInput!]

    faveGroups: [UniqueGroupInput!]

    faveListings: [UniqueListingInput!]

    faveUsers: [UniqueUserInput!]
}

input UniqueUserInput {
    id: ID

    username: String
}
