"""
Represents a user in the system
"""
type User {
  # Unique user ID
  id: ID!

  # Unique username
  username: String!

  # Country
  country: String!

  # All listings created by user
  listings: [Listing!]

  # All collections created by user
  collections: [Collection!]

  # All groups marked as fave by user
  faveGroups: [Group!]

  # All listings marked as fave by user
  faveListings: [Listing!]

  # All users marked as fave by user
  faveUsers: [User!]
}

"""
Represents a collection owned by a user
"""
type Collection {
  # Unique collection ID
  id: ID!

  # Title of the collection
  title: String!

  # Description for the collection
  description: String!

  # Owner of the collection
  owner: User!
}

"""
Represents a group in the system
"""
type Group {
  # Unique group ID
  id: ID!

  # Name of the group
  name: String!

  # Collection of members of the group
  members: [Idol!]!
}

"""
Represents an idol in the system
"""
type Idol {
  # Unique idol ID
  id: ID!

  # Stage name of the idol
  stageName: String!

  # Group(s) to which this idol belongs
  groups: [Group!]!
}

"""
Represents a specific release to which a photocard belongs
"""
type Release {
  # Unique release ID
  id: ID!

  # Title of the release
  title: String!

  # The group that had this release
  group: Group!
}

"""
Represents a listing in the system
"""
interface Listing {
  # Unique listing ID
  id: ID!

  # Owner of the listing
  owner: User!

  # The condition of the photocard
  condition: Condition!

  # The idol whose photocard this is
  idol: Idol!

  # The release this photocard's listing is from
  release: Release!

  # Listing description
  description: String!

  # Country where this photocard will be shipped from
  countryOfOrigin: String!

  # Whether or not this photocard can be shipped internationally
  internationalShipping: Boolean!
}

type SellListing implements Listing {
  # Interface fields
  id: ID!
  owner: User!
  condition: Condition!
  idol: Idol!
  release: Release!
  description: String!
  countryOfOrigin: String!
  internationalShipping: Boolean!

  # Minimum price for listing
  minPrice: Float!
}

type TradeListing implements Listing {
  # Interface fields
  id: ID!
  owner: User!
  condition: Condition!
  idol: Idol!
  release: Release!
  description: String!
  countryOfOrigin: String!
  internationalShipping: Boolean!

  # Description of the desired photocard
  tradeTargets: [TradeTargets]

  # Minimum price for listing
  minPrice: Float
}

union TradeTargets = Idol | Group | ConditionWrapper
